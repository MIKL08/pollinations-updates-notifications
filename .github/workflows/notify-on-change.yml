name: Pollinations Models Monitor

on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:

permissions:
  contents: read

env:
  GLOT_TOKEN: ${{ secrets.GLOT_TOKEN }}
  GLOT_ID: ${{ secrets.GLOT_ID }}
  GLOT_SNIPPET_TITLE: "pollinations_models_snapshot"

jobs:
  check-models:
    runs-on: ubuntu-latest
    steps:
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Restore from glot.io
        id: restore
        continue-on-error: true
        run: |
          RESPONSE=$(curl -s -X GET "https://glot.io/api/snippets/$GLOT_ID" \
            -H "Authorization: Token $GLOT_TOKEN")
          
          if [ "$(echo "$RESPONSE" | jq -r '.files[0].content')" != "null" ]; then
            echo "$RESPONSE" | jq -r '.files[0].content' > pollinations_models.json
            echo "restored=true" >> $GITHUB_OUTPUT
          else
            echo "restored=false" >> $GITHUB_OUTPUT
          fi

      - name: Fetch models with retries
        id: fetch
        continue-on-error: true
        run: |
          set -euo pipefail
          for i in {1..3}; do
            if curl -sS --fail -A "github-actions-bot" "https://text.pollinations.ai/models" -o /tmp/models.json; then
              echo "status=success" >> $GITHUB_OUTPUT
              exit 0
            fi
            echo "Attempt $i/3 failed"
            sleep 10
          done
          echo "::error::POLLINATIONS API IS DOWN - Failed after 3 attempts"
          echo "status=failure" >> $GITHUB_OUTPUT
          exit 0

      - name: Compare models
        if: steps.fetch.outputs.status == 'success'
        id: compare
        run: |
          set -euo pipefail
          python3 - <<'PY'
          import json, sys
          from pathlib import Path
          
          def normalize_model(m):
              m = dict(m)
              for key in ("input_modalities", "output_modalities", "voices", "tools"):
                  if key in m and isinstance(m[key], list):
                      m[key] = sorted(set(m[key]))
              return m
          
          tmp = Path("/tmp/models.json")
          try:
              data = json.loads(tmp.read_text(encoding="utf-8"))
          except Exception as e:
              print(f"::error::Failed to parse JSON: {e}")
              sys.exit(1)
          
          normalized = [normalize_model(m) for m in data]
          normalized.sort(key=lambda x: str(x.get("name","")))
          
          curr_txt = json.dumps(normalized, ensure_ascii=False, indent=2, sort_keys=True) + "\n"
          
          prev_path = Path("pollinations_models.json")
          lines = []
          
          if not prev_path.exists():
              prev_path.write_text(curr_txt, encoding="utf-8")
              Path("/tmp/changed.flag").write_text("false", encoding="utf-8")
              Path("/tmp/message.txt").write_text("First snapshot initialized. No notification sent.\n", encoding="utf-8")
              sys.exit(0)
          
          prev = json.loads(prev_path.read_text(encoding="utf-8"))
          
          def to_map(items):
              return {str(i.get("name","")): i for i in items if i.get("name")}
          
          prev_map = to_map(prev)
          curr_map = to_map(normalized)
          
          added = sorted(set(curr_map) - set(prev_map))
          removed = sorted(set(prev_map) - set(curr_map))
          common = sorted(set(prev_map) & set(curr_map))
          
          modified = {}
          
          def diff_dicts(o,n):
              d={}
              for k in sorted(set(o)|set(n)):
                  ov=o.get(k); nv=n.get(k)
                  if ov!=nv:
                      if isinstance(ov, list) and isinstance(nv, list):
                          if set(ov) != set(nv):
                              d[k] = {"old":ov, "new":nv}
                      else:
                          d[k] = {"old":ov, "new":nv}
              return d
          
          for name in common:
              d = diff_dicts(prev_map[name], curr_map[name])
              if d:
                  modified[name]=d
          
          has_changes = bool(added or removed or modified)
          
          if added:
              lines.append("*+ Added models:*")
              for n in added:
                  m=curr_map[n]
                  lines.append(f"  - {n} (description: {m.get('description','?')}, provider: {m.get('provider','?')}, tier: {m.get('tier','?')})")
          
          if removed:
              lines.append("\n*- Deleted models:*")
              for n in removed:
                  m=prev_map[n]
                  lines.append(f"  - {n} (description: {m.get('description','?')}, provider: {m.get('provider','?')}, tier: {m.get('tier','?')})")
          
          if modified:
              lines.append("\n*> Updated models:*")
              for n in sorted(modified):
                  lines.append(f"  - {n}:")
                  for k,ch in modified[n].items():
                      lines.append(f"      ‚Ä¢ {k}: {ch['old']} ‚Üí {ch['new']}")
          
          if not has_changes:
              lines.append("No changes found.")
          
          Path("/tmp/message.txt").write_text("\n".join(lines) + "\n", encoding="utf-8")
          Path("/tmp/changed.flag").write_text("true" if has_changes else "false", encoding="utf-8")
          
          if has_changes:
              prev_path.write_text(curr_txt, encoding="utf-8")
          PY

          CHANGED=$(cat /tmp/changed.flag 2>/dev/null || echo false)
          if [ "$CHANGED" = "true" ]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "changed=false" >> "$GITHUB_OUTPUT"
          fi

          {
            echo 'message<<EOF'
            cat /tmp/message.txt
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Notify model changes
        if: steps.compare.outputs.changed == 'true'
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            *üì¢ Pollinations AI Models Update:*
            ${{ steps.compare.outputs.message }}
          parse_mode: markdown

      - name: Alert API failure
        if: steps.fetch.outputs.status == 'failure'
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            ‚ÄºÔ∏è_Maybe_ *Pollinations AI API is down*‚ÄºÔ∏è
            Failed 3 times to fetch models.
          parse_mode: markdown